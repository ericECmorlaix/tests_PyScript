{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Memo pour PyScript","text":""},{"location":"#preparation","title":"Pr\u00e9paration","text":""},{"location":"#page-html","title":"Page HTML","text":"<p>Il faut inclure dans le <code>&lt;head&gt;</code> deux balises : <pre><code>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://pyscript.net/latest/pyscript.css\" /&gt;\n  &lt;script defer src=\"https://pyscript.net/latest/pyscript.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre></p>"},{"location":"#page-mkdocs-markdown","title":"Page MkDocs MarkDown","text":"<p>Se r\u00e9f\u00e9rer au r\u00e9sum\u00e9 de configuration de Rodrigo SCHWENCKE.</p>"},{"location":"#inventaire-de-balises","title":"Inventaire de balises","text":""},{"location":"#py-script","title":"<code>&lt;py-script&gt;</code>","text":"Le code :Produit : <pre><code>&lt;py-script&gt;\ndisplay(\"Demat d'an holl !\")\n&lt;/py-script&gt;\n</code></pre> <p> display(\"Demat d'an holl !\") </p> Le code :Produit :Avec dans le fichier <code>toto.py</code> : <pre><code>&lt;py-script src=\"./pyscripts/toto.py\"&gt;&lt;/py-script&gt;\n</code></pre> <p></p> <pre><code>display('Toto est dans la place !')\n</code></pre> Le code :Produit : <pre><code>&lt;p&gt;&lt;strong&gt;Aujourd'hui nous sommes le &lt;label id='date'&gt;&lt;/label&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;py-script&gt;\nimport time\npyscript.write('date', time.strftime('%d/%m/%Y %H:%M:%S'))\n&lt;/py-script&gt;\n</code></pre> <p><p>Aujourd'hui nous sommes le </p>  import time pyscript.write('date', time.strftime('%d/%m/%Y %H:%M:%S')) </p>"},{"location":"#py-repl","title":"<code>&lt;py-repl&gt;</code>","text":"Le code :Produit : <pre><code>&lt;py-repl id=\"my-repl\" auto-generate=true&gt;&lt;/py-repl&gt;\n</code></pre> <p>&lt;</p> <p>Saisir une instruction Python dans la cellule REPL puis l'ex\u00e9cuter avec la combinaison de touches \u21d1 Maj.\uff0bEntr\u00e9e \u21b5...</p> Le code :Produit : <pre><code>&lt;div&gt;\n&lt;py-repl&gt;\ndef inverse_chaine(chaine):\n    chaine_inverse = ''\n    for caractere in chaine:\n        chaine_inverse = caractere + chaine_inverse\n    return chaine_inverse\ndef est_palindrome(chaine):\n    chaine_inverse = inverse_chaine(chaine)\n    if chaine.lower() == \"kayak\" :\n        print(\"'kayak' est un faux ami, \u00e0 l'envers il fait 'glouglou' !\")\n    else :\n        return chaine == chaine_inverse\n&lt;/py-repl&gt;\n&lt;py-repl&gt;\n    # test 1 : doit renvoyer 'NSI'\ninverse_chaine('ISN')\n&lt;/py-repl&gt;\n&lt;py-repl&gt;\n    # test 2 : doit renyoyer False\nest_palindrome('NSI')\n&lt;/py-repl&gt;\n&lt;py-repl&gt;\n    # tests 3 : doit renyoyer True\nest_palindrome('ISN-NSI')\n&lt;/py-repl&gt;\n&lt;py-repl&gt;\n    # tests 4 : ???\nest_palindrome('kayak')\n&lt;/py-repl&gt;\n&lt;py-repl id=\"my-repl\" auto-generate=true&gt;\n    # R\u00e9aliser vos propres tests :\n...\n&lt;/py-repl&gt;\n&lt;/div&gt;\n</code></pre> <p>  def inverse_chaine(chaine):     chaine_inverse = ''     for caractere in chaine:         chaine_inverse = caractere + chaine_inverse     return chaine_inverse def est_palindrome(chaine):     chaine_inverse = inverse_chaine(chaine)     if chaine.lower() == \"kayak\" :         print(\"'kayak' est un faux ami, \u00e0 l'envers il fait 'glouglou' !\")     else :         return chaine == chaine_inverse       # test 1 : doit renvoyer 'NSI' inverse_chaine('ISN')       # test 2 : doit renyoyer False est_palindrome('NSI')       # tests 3 : doit renyoyer True est_palindrome('ISN-NSI')       # tests 4 : ??? est_palindrome('kayak')       # R\u00e9aliser vos propres tests : ...  </p> Le code :Ne produit plus de bugBug maintenant r\u00e9solu : <pre><code>&lt;py-repl&gt;\ndef indice_min(nombres : list) -&gt; int :\n    indice = 0\n    minimum = nombres[0]\n    for i in range(len(nombres)) :\n        if minimum &gt; nombres[i] :\n            minimum = nombres[i]\n            indice = i\n        return indice\n&lt;/py-repl&gt;\n&lt;py-repl&gt;\n    # test 1 : doit renvoyer 2\nindice_min([2, 4, 1, 1])\n&lt;/py-repl&gt;\n&lt;py-repl&gt;\n    # test 2 : doit renyoyer True\nindice_min([5]) == 0\n&lt;/py-repl&gt;\n&lt;py-repl&gt;\n    # tests 3 : ne doit pas renvoyer de message d'erreur\nassert indice_min([2, 4, 1, 1]) == 2\n&lt;/py-repl&gt;\n&lt;py-repl id=\"my-repl\" auto-generate=true&gt;\n    # R\u00e9aliser vos propres tests :\nindice_min(...)\n&lt;/py-repl&gt;\n</code></pre> <p> def indice_min(nombres : list) -&gt; int :     indice = 0     minimum = nombres[0]     for i in range(len(nombres)) :         if minimum &gt; nombres[i] :             minimum = nombres[i]             indice = i         return indice       # test 1 : doit renvoyer 2 indice_min([2, 4, 1, 1])       # test 2 : doit renyoyer True indice_min([5]) == 0       # tests 3 : ne doit pas renvoyer de message d'erreur assert indice_min([2, 4, 1, 1]) == 2       # R\u00e9aliser vos propres tests : indice_min(...)  </p> <p>fix: &lt; and &gt; are parsed with HTML escape symbols</p>"},{"location":"#py-env","title":"<code>&lt;py-env&gt;</code>","text":"Le code :Produit :Avec dans le fichier <code>mes_fonctions.py</code> : <pre><code>&lt;py-env&gt;\n- paths:\n  - ./pyscripts/mes_fonctions.py\n&lt;/py-env&gt;\n&lt;py-script&gt;  \nfrom mes_fonctions import calcul_pi\nprint(\"Calculons \u03c0 :\")      \npi = calcul_pi(100000)\ns = f\"\u03c0 vaut approximativement {pi:.4f}\"\nprint(s)\n&lt;/py-script&gt;\n</code></pre> <p> - paths:   - ./pyscripts/mes_fonctions.py   from mes_fonctions import calcul_pi display(\"Calculons \u03c0 :\")     pi = calcul_pi(100000) s = f\"\u03c0 vaut approximativement {pi:.4f}\" display(s) </p> <pre><code>def calcul_pi(n):\n    pi = 2\n    for i in range(1,n):\n        pi *= 4 * i ** 2 / (4 * i ** 2 - 1)\n    return pi\n</code></pre>"},{"location":"#py-title","title":"<code>&lt;py-title&gt;</code>","text":"Le code :Produit : <pre><code>&lt;py-title&gt;Un titre centr\u00e9&lt;/py-title&gt;\n</code></pre> <p>Un titre centr\u00e9</p> <p>Inventaire \u00e0 finaliser...</p>"},{"location":"#py-inputbox","title":"<code>&lt;py-inputbox&gt;</code>","text":""},{"location":"#py-box","title":"<code>&lt;py-box&gt;</code>","text":""},{"location":"#py-button","title":"<code>&lt;py-button&gt;</code>","text":""},{"location":"#py-config","title":"<code>&lt;py-config&gt;</code>","text":""},{"location":"pyscript-canvas/","title":"Canvas M","text":"<p>Pour modifier le dessin, ex\u00e9cuter successivement les instructions des cellules REPL ci-dessous avec la combinaison de touches \u21d1 Maj.\uff0bEntr\u00e9e \u21b5 ...</p> Chargement de la page, ..., rafraichir (F5) si n\u00e9cessaire, ...   from js import document  document.getElementById(\"status\").innerHTML = 'PyScript est charg\u00e9 et pr\u00eat pour dessiner avec Python dans le Canvas ...'  canvas = document.getElementById(\"mon_dessin\") dessin = canvas.getContext(\"2d\")  def maison() :     # Set line width     dessin.lineWidth = 10      # Wall     dessin.strokeRect(75, 140, 150, 110)      # Door     dessin.fillRect(130, 190, 40, 60)      # Roof     dessin.beginPath()     dessin.moveTo(50, 140)     dessin.lineTo(150, 60)     dessin.lineTo(250, 140)     dessin.closePath()     dessin.stroke()  maison()      dessin.clearRect(0, 0, canvas.width, canvas.height)     dessin.fillStyle = 'rgb(220, 220, 220)' dessin.fillRect(0, 0, 200, 160)     dessin.fillStyle = \"yellow\"  dessin.fillRect(25, 40, 150, 80)     dessin.strokeStyle = '#FF0000' dessin.strokeRect(25, 40, 150, 80)     dessin.clearRect(70, 50, 60, 60)     def efface_tout(toile) :     toile.clearRect(0, 0, canvas.width, canvas.height)     efface_tout(dessin)     for i in range(10) :     dessin.strokeRect(25*i, 40, 100, 80)     from math import pi  dessin.clearRect(0, 0, canvas.width, canvas.height)  def smile(x,y) :     dessin.lineWidth = 4     dessin.strokeStyle = 'cyan'     dessin.beginPath()     dessin.arc(x,y, 50, 0, pi * 2, True)     dessin.moveTo(x+35, y)     dessin.arc(x, y, 35, 0, pi, False)     dessin.moveTo(x-10, y-10)     dessin.arc(x-15, y-10, 5, 0, pi * 2, True)     dessin.moveTo(x+20, y-10)     dessin.arc(x+15, y-10, 5, 0, pi * 2, True)     dessin.stroke()  smile(canvas.width/2, canvas.height/2)     # Coder vos propres dessin : ..."},{"location":"pyscript/","title":"PyScript M","text":"print(\"Hello World\")  <p>Today is </p>  import time pyscript.write('date', time.strftime('%d/%m/%Y %H:%M:%S'))         print(\"Let's evaluate \u03c0 :\")     def eval_pi(n):         pi = 2         for i in range(1,n):             pi *= 4 * i ** 2 / (4 * i ** 2 - 1)         return pi     pi = eval_pi(100000)     s = \"\u00a0\" * 10 + f\"\u03c0 is approximately {pi:.5f}\"     print(s)   pyscript.write('hey', f'Hey Mate !')"},{"location":"ressources/","title":"Ressources","text":""},{"location":"ressources/#videos","title":"Vid\u00e9os","text":"<p>Site pour tester PyScript visible \u00e0 l'adresse : https://ericecmorlaix.github.io/tests_PyScript/</p>"},{"location":"ressources/#quelques-liens","title":"Quelques liens :","text":"<ul> <li>https://github.com/pyscript/pyscript</li> <li>https://pyscript.net/examples/</li> <li>Welcome-pyscript.html</li> <li> <p>https://community.anaconda.cloud/c/tech-topics/pyscript/41</p> </li> <li> <p>lemondeinformatique-avec-pyscript-le-code-python-s-execute-dans-un-navigateur</p> </li> <li> <p>https://www.freecodecamp.org/news/pyscript-python-front-end-framework/</p> </li> <li> <p>https://pythonprogramming.altervista.org/how-to-upload-an-image-with-pyscript/</p> </li> <li>https://pythonprogramming.altervista.org/pyscript-using-sqlite-with-pyscript/</li> <li> <p>https://pythonprogramming.altervista.org/run-python-in-html-pyscript/</p> </li> <li> <p>https://realpython.com/pyscript-python-in-browser/</p> </li> <li> <p>https://jeff.glass/post/pyscript-intro/</p> </li> <li> <p>https://www.jhanley.com/category/pyscript/</p> </li> <li> <p>https://morioh.com/p/d9d3c73d3e22</p> </li> <li> <p>https://github.com/eduardobonet/nblite</p> </li> </ul>"},{"location":"ressources/#quelques-notes","title":"Quelques notes :","text":"<p>C\u2019est tr\u00e8s tr\u00e8s cool, on va pouvoir \u00e9crire du code Python directement au milieu du code HTML d\u2019une page web !</p> <p>Une des branches d\u2019avenir pour Python semble donc \u00eatre celle de Pyodide/WASM<sup>1</sup> qui permet de faire dialoguer les biblioth\u00e8ques de Python avec celles de JavaScript directement sur une page web statique charg\u00e9e sur la machine cot\u00e9 client. C\u2019est le cas de :</p> <ul> <li>Basthon</li> <li>JupyterLite</li> <li>MkDocs+Pyodide</li> <li>starboard-notebook</li> <li>futurecoder</li> <li>Et bien d\u2019autres dans le futur</li> </ul> <ol> <li> <p>WASM = WebAssembly : https://www.jesuisundev.com/comprendre-webassembly-en-5-minutes/\u00a0\u21a9</p> </li> </ol>"}]}